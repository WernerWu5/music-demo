// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:distribution_mall_flutter/entity/address/address_entity.dart';
import 'package:distribution_mall_flutter/entity/common/upload_file_entity.dart';
import 'package:distribution_mall_flutter/entity/delete_account/delete_account_captcha_token_entity.dart';
import 'package:distribution_mall_flutter/entity/delete_account/delete_account_check_entity.dart';
import 'package:distribution_mall_flutter/entity/delete_account/delete_account_send_code_entity.dart';
import 'package:distribution_mall_flutter/entity/goods/detail/goods_detail_entity.dart';
import 'package:distribution_mall_flutter/entity/goods/list/goods_list_entity.dart';
import 'package:distribution_mall_flutter/entity/order/checkout/order_checkout_entity.dart';
import 'package:distribution_mall_flutter/entity/order/order.dart';
import 'package:distribution_mall_flutter/entity/pay/list/pay_list_entity.dart';
import 'package:distribution_mall_flutter/entity/pay/pay.dart';
import 'package:distribution_mall_flutter/entity/user/user_distributor_info_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(
    Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AddressEntity>[] is M) {
      return data
          .map<AddressEntity>(
              (Map<String, dynamic> e) => AddressEntity.fromJson(e))
          .toList() as M;
    }
    if (<AddressItem>[] is M) {
      return data
          .map<AddressItem>((Map<String, dynamic> e) => AddressItem.fromJson(e))
          .toList() as M;
    }
    if (<PageMeta>[] is M) {
      return data
          .map<PageMeta>((Map<String, dynamic> e) => PageMeta.fromJson(e))
          .toList() as M;
    }
    if (<AddressDeliveryTimeEntity>[] is M) {
      return data
          .map<AddressDeliveryTimeEntity>(
              (Map<String, dynamic> e) => AddressDeliveryTimeEntity.fromJson(e))
          .toList() as M;
    }
    if (<UploadFileBody>[] is M) {
      return data
          .map<UploadFileBody>(
              (Map<String, dynamic> e) => UploadFileBody.fromJson(e))
          .toList() as M;
    }
    if (<DeleteAccountCaptchaTokenBody>[] is M) {
      return data
          .map<DeleteAccountCaptchaTokenBody>((Map<String, dynamic> e) =>
              DeleteAccountCaptchaTokenBody.fromJson(e))
          .toList() as M;
    }
    if (<DeleteAccountCheckEntity>[] is M) {
      return data
          .map<DeleteAccountCheckEntity>(
              (Map<String, dynamic> e) => DeleteAccountCheckEntity.fromJson(e))
          .toList() as M;
    }
    if (<DeleteAccountCheckBody>[] is M) {
      return data
          .map<DeleteAccountCheckBody>(
              (Map<String, dynamic> e) => DeleteAccountCheckBody.fromJson(e))
          .toList() as M;
    }
    if (<DeleteAccountCheckBodyChecklist>[] is M) {
      return data
          .map<DeleteAccountCheckBodyChecklist>((Map<String, dynamic> e) =>
              DeleteAccountCheckBodyChecklist.fromJson(e))
          .toList() as M;
    }
    if (<DeleteAccountCheckBodyPrimaryAccount>[] is M) {
      return data
          .map<DeleteAccountCheckBodyPrimaryAccount>((Map<String, dynamic> e) =>
              DeleteAccountCheckBodyPrimaryAccount.fromJson(e))
          .toList() as M;
    }
    if (<DeleteAccountCheckStatus>[] is M) {
      return data
          .map<DeleteAccountCheckStatus>(
              (Map<String, dynamic> e) => DeleteAccountCheckStatus.fromJson(e))
          .toList() as M;
    }
    if (<DeleteAccountSendCodeBody>[] is M) {
      return data
          .map<DeleteAccountSendCodeBody>(
              (Map<String, dynamic> e) => DeleteAccountSendCodeBody.fromJson(e))
          .toList() as M;
    }
    if (<GoodsDetailEntity>[] is M) {
      return data
          .map<GoodsDetailEntity>(
              (Map<String, dynamic> e) => GoodsDetailEntity.fromJson(e))
          .toList() as M;
    }
    if (<ItemInfo>[] is M) {
      return data
          .map<ItemInfo>((Map<String, dynamic> e) => ItemInfo.fromJson(e))
          .toList() as M;
    }
    if (<ItemInfoSpec>[] is M) {
      return data
          .map<ItemInfoSpec>(
              (Map<String, dynamic> e) => ItemInfoSpec.fromJson(e))
          .toList() as M;
    }
    if (<SuInfo>[] is M) {
      return data
          .map<SuInfo>((Map<String, dynamic> e) => SuInfo.fromJson(e))
          .toList() as M;
    }
    if (<FollowInfo>[] is M) {
      return data
          .map<FollowInfo>((Map<String, dynamic> e) => FollowInfo.fromJson(e))
          .toList() as M;
    }
    if (<SuInfoVideo>[] is M) {
      return data
          .map<SuInfoVideo>((Map<String, dynamic> e) => SuInfoVideo.fromJson(e))
          .toList() as M;
    }
    if (<LadderPrice>[] is M) {
      return data
          .map<LadderPrice>((Map<String, dynamic> e) => LadderPrice.fromJson(e))
          .toList() as M;
    }
    if (<Param>[] is M) {
      return data
          .map<Param>((Map<String, dynamic> e) => Param.fromJson(e))
          .toList() as M;
    }
    if (<SaleInfo>[] is M) {
      return data
          .map<SaleInfo>((Map<String, dynamic> e) => SaleInfo.fromJson(e))
          .toList() as M;
    }
    if (<PriceRangeInfo>[] is M) {
      return data
          .map<PriceRangeInfo>(
              (Map<String, dynamic> e) => PriceRangeInfo.fromJson(e))
          .toList() as M;
    }
    if (<Sale>[] is M) {
      return data
          .map<Sale>((Map<String, dynamic> e) => Sale.fromJson(e))
          .toList() as M;
    }
    if (<SpecInfo>[] is M) {
      return data
          .map<SpecInfo>((Map<String, dynamic> e) => SpecInfo.fromJson(e))
          .toList() as M;
    }
    if (<ShippingInfo>[] is M) {
      return data
          .map<ShippingInfo>(
              (Map<String, dynamic> e) => ShippingInfo.fromJson(e))
          .toList() as M;
    }
    if (<SkuShippingInfo>[] is M) {
      return data
          .map<SkuShippingInfo>(
              (Map<String, dynamic> e) => SkuShippingInfo.fromJson(e))
          .toList() as M;
    }
    if (<EstimateShippingInfoVo>[] is M) {
      return data
          .map<EstimateShippingInfoVo>(
              (Map<String, dynamic> e) => EstimateShippingInfoVo.fromJson(e))
          .toList() as M;
    }
    if (<SuInfoSpec>[] is M) {
      return data
          .map<SuInfoSpec>((Map<String, dynamic> e) => SuInfoSpec.fromJson(e))
          .toList() as M;
    }
    if (<Value>[] is M) {
      return data
          .map<Value>((Map<String, dynamic> e) => Value.fromJson(e))
          .toList() as M;
    }
    if (<TagInfo>[] is M) {
      return data
          .map<TagInfo>((Map<String, dynamic> e) => TagInfo.fromJson(e))
          .toList() as M;
    }
    if (<GoodsListEntity>[] is M) {
      return data
          .map<GoodsListEntity>(
              (Map<String, dynamic> e) => GoodsListEntity.fromJson(e))
          .toList() as M;
    }
    if (<PageResult>[] is M) {
      return data
          .map<PageResult>((Map<String, dynamic> e) => PageResult.fromJson(e))
          .toList() as M;
    }
    if (<Item>[] is M) {
      return data
          .map<Item>((Map<String, dynamic> e) => Item.fromJson(e))
          .toList() as M;
    }
    if (<BrandInfo>[] is M) {
      return data
          .map<BrandInfo>((Map<String, dynamic> e) => BrandInfo.fromJson(e))
          .toList() as M;
    }
    if (<CategoryInfo>[] is M) {
      return data
          .map<CategoryInfo>(
              (Map<String, dynamic> e) => CategoryInfo.fromJson(e))
          .toList() as M;
    }
    if (<ImageInfo>[] is M) {
      return data
          .map<ImageInfo>((Map<String, dynamic> e) => ImageInfo.fromJson(e))
          .toList() as M;
    }
    if (<PriceInfo>[] is M) {
      return data
          .map<PriceInfo>((Map<String, dynamic> e) => PriceInfo.fromJson(e))
          .toList() as M;
    }
    if (<GoodsPageMeta>[] is M) {
      return data
          .map<GoodsPageMeta>(
              (Map<String, dynamic> e) => GoodsPageMeta.fromJson(e))
          .toList() as M;
    }
    if (<OrderCheckoutEntity>[] is M) {
      return data
          .map<OrderCheckoutEntity>(
              (Map<String, dynamic> e) => OrderCheckoutEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderItemGroupList>[] is M) {
      return data
          .map<OrderItemGroupList>(
              (Map<String, dynamic> e) => OrderItemGroupList.fromJson(e))
          .toList() as M;
    }
    if (<OrderSuItemList>[] is M) {
      return data
          .map<OrderSuItemList>(
              (Map<String, dynamic> e) => OrderSuItemList.fromJson(e))
          .toList() as M;
    }
    if (<OrderGoodsList>[] is M) {
      return data
          .map<OrderGoodsList>(
              (Map<String, dynamic> e) => OrderGoodsList.fromJson(e))
          .toList() as M;
    }
    if (<AfterSale>[] is M) {
      return data
          .map<AfterSale>((Map<String, dynamic> e) => AfterSale.fromJson(e))
          .toList() as M;
    }
    if (<Spec>[] is M) {
      return data
          .map<Spec>((Map<String, dynamic> e) => Spec.fromJson(e))
          .toList() as M;
    }
    if (<OrderPromotionList>[] is M) {
      return data
          .map<OrderPromotionList>(
              (Map<String, dynamic> e) => OrderPromotionList.fromJson(e))
          .toList() as M;
    }
    if (<OrderCreateEntity>[] is M) {
      return data
          .map<OrderCreateEntity>(
              (Map<String, dynamic> e) => OrderCreateEntity.fromJson(e))
          .toList() as M;
    }
    if (<OrderTransportEntity>[] is M) {
      return data
          .map<OrderTransportEntity>(
              (Map<String, dynamic> e) => OrderTransportEntity.fromJson(e))
          .toList() as M;
    }
    if (<SaleReasonEntity>[] is M) {
      return data
          .map<SaleReasonEntity>(
              (Map<String, dynamic> e) => SaleReasonEntity.fromJson(e))
          .toList() as M;
    }
    if (<PayListEntity>[] is M) {
      return data
          .map<PayListEntity>(
              (Map<String, dynamic> e) => PayListEntity.fromJson(e))
          .toList() as M;
    }
    if (<PayListType>[] is M) {
      return data
          .map<PayListType>((Map<String, dynamic> e) => PayListType.fromJson(e))
          .toList() as M;
    }
    if (<PayListPlatform>[] is M) {
      return data
          .map<PayListPlatform>(
              (Map<String, dynamic> e) => PayListPlatform.fromJson(e))
          .toList() as M;
    }
    if (<PaymentMethod>[] is M) {
      return data
          .map<PaymentMethod>(
              (Map<String, dynamic> e) => PaymentMethod.fromJson(e))
          .toList() as M;
    }
    if (<PaymentMethodClientBank>[] is M) {
      return data
          .map<PaymentMethodClientBank>(
              (Map<String, dynamic> e) => PaymentMethodClientBank.fromJson(e))
          .toList() as M;
    }
    if (<OrderPaymentEntity>[] is M) {
      return data
          .map<OrderPaymentEntity>(
              (Map<String, dynamic> e) => OrderPaymentEntity.fromJson(e))
          .toList() as M;
    }
    if (<BankRemitParams>[] is M) {
      return data
          .map<BankRemitParams>(
              (Map<String, dynamic> e) => BankRemitParams.fromJson(e))
          .toList() as M;
    }
    if (<ExternalUrlParams>[] is M) {
      return data
          .map<ExternalUrlParams>(
              (Map<String, dynamic> e) => ExternalUrlParams.fromJson(e))
          .toList() as M;
    }
    if (<PaymentStateEntity>[] is M) {
      return data
          .map<PaymentStateEntity>(
              (Map<String, dynamic> e) => PaymentStateEntity.fromJson(e))
          .toList() as M;
    }
    if (<UserDistributorInfoBody>[] is M) {
      return data
          .map<UserDistributorInfoBody>(
              (Map<String, dynamic> e) => UserDistributorInfoBody.fromJson(e))
          .toList() as M;
    }
    if (<UserDistributorInfoBodyLevel>[] is M) {
      return data
          .map<UserDistributorInfoBodyLevel>((Map<String, dynamic> e) =>
              UserDistributorInfoBodyLevel.fromJson(e))
          .toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AddressEntity).toString(): AddressEntity.fromJson,
    (AddressItem).toString(): AddressItem.fromJson,
    (PageMeta).toString(): PageMeta.fromJson,
    (AddressDeliveryTimeEntity).toString(): AddressDeliveryTimeEntity.fromJson,
    (UploadFileBody).toString(): UploadFileBody.fromJson,
    (DeleteAccountCaptchaTokenBody).toString():
        DeleteAccountCaptchaTokenBody.fromJson,
    (DeleteAccountCheckEntity).toString(): DeleteAccountCheckEntity.fromJson,
    (DeleteAccountCheckBody).toString(): DeleteAccountCheckBody.fromJson,
    (DeleteAccountCheckBodyChecklist).toString():
        DeleteAccountCheckBodyChecklist.fromJson,
    (DeleteAccountCheckBodyPrimaryAccount).toString():
        DeleteAccountCheckBodyPrimaryAccount.fromJson,
    (DeleteAccountCheckStatus).toString(): DeleteAccountCheckStatus.fromJson,
    (DeleteAccountSendCodeBody).toString(): DeleteAccountSendCodeBody.fromJson,
    (GoodsDetailEntity).toString(): GoodsDetailEntity.fromJson,
    (ItemInfo).toString(): ItemInfo.fromJson,
    (ItemInfoSpec).toString(): ItemInfoSpec.fromJson,
    (SuInfo).toString(): SuInfo.fromJson,
    (FollowInfo).toString(): FollowInfo.fromJson,
    (SuInfoVideo).toString(): SuInfoVideo.fromJson,
    (LadderPrice).toString(): LadderPrice.fromJson,
    (Param).toString(): Param.fromJson,
    (SaleInfo).toString(): SaleInfo.fromJson,
    (PriceRangeInfo).toString(): PriceRangeInfo.fromJson,
    (Sale).toString(): Sale.fromJson,
    (SpecInfo).toString(): SpecInfo.fromJson,
    (ShippingInfo).toString(): ShippingInfo.fromJson,
    (SkuShippingInfo).toString(): SkuShippingInfo.fromJson,
    (EstimateShippingInfoVo).toString(): EstimateShippingInfoVo.fromJson,
    (SuInfoSpec).toString(): SuInfoSpec.fromJson,
    (Value).toString(): Value.fromJson,
    (TagInfo).toString(): TagInfo.fromJson,
    (GoodsListEntity).toString(): GoodsListEntity.fromJson,
    (PageResult).toString(): PageResult.fromJson,
    (Item).toString(): Item.fromJson,
    (BrandInfo).toString(): BrandInfo.fromJson,
    (CategoryInfo).toString(): CategoryInfo.fromJson,
    (ImageInfo).toString(): ImageInfo.fromJson,
    (PriceInfo).toString(): PriceInfo.fromJson,
    (GoodsPageMeta).toString(): GoodsPageMeta.fromJson,
    (OrderCheckoutEntity).toString(): OrderCheckoutEntity.fromJson,
    (OrderItemGroupList).toString(): OrderItemGroupList.fromJson,
    (OrderSuItemList).toString(): OrderSuItemList.fromJson,
    (OrderGoodsList).toString(): OrderGoodsList.fromJson,
    (AfterSale).toString(): AfterSale.fromJson,
    (Spec).toString(): Spec.fromJson,
    (OrderPromotionList).toString(): OrderPromotionList.fromJson,
    (OrderCreateEntity).toString(): OrderCreateEntity.fromJson,
    (OrderTransportEntity).toString(): OrderTransportEntity.fromJson,
    (SaleReasonEntity).toString(): SaleReasonEntity.fromJson,
    (PayListEntity).toString(): PayListEntity.fromJson,
    (PayListType).toString(): PayListType.fromJson,
    (PayListPlatform).toString(): PayListPlatform.fromJson,
    (PaymentMethod).toString(): PaymentMethod.fromJson,
    (PaymentMethodClientBank).toString(): PaymentMethodClientBank.fromJson,
    (OrderPaymentEntity).toString(): OrderPaymentEntity.fromJson,
    (BankRemitParams).toString(): BankRemitParams.fromJson,
    (ExternalUrlParams).toString(): ExternalUrlParams.fromJson,
    (PaymentStateEntity).toString(): PaymentStateEntity.fromJson,
    (UserDistributorInfoBody).toString(): UserDistributorInfoBody.fromJson,
    (UserDistributorInfoBodyLevel).toString():
        UserDistributorInfoBodyLevel.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
